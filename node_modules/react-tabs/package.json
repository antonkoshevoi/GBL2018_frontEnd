{
  "_args": [
    [
      {
        "raw": "react-tabs",
        "scope": null,
        "escapedName": "react-tabs",
        "name": "react-tabs",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\xampp\\htdocs\\GravityBrain\\GBL2018_frontEnd"
    ]
  ],
  "_from": "react-tabs@latest",
  "_id": "react-tabs@2.2.1",
  "_inCache": true,
  "_location": "/react-tabs",
  "_nodeVersion": "8.9.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-tabs-2.2.1.tgz_1515509004091_0.34314025891944766"
  },
  "_npmUser": {
    "name": "danez",
    "email": "daniel@tschinder.de"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-tabs",
    "scope": null,
    "escapedName": "react-tabs",
    "name": "react-tabs",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-tabs/-/react-tabs-2.2.1.tgz",
  "_shasum": "0331d26173c56e7af4fdbfb6225e62683cfdda52",
  "_shrinkwrap": null,
  "_spec": "react-tabs",
  "_where": "C:\\xampp\\htdocs\\GravityBrain\\GBL2018_frontEnd",
  "author": {
    "name": "Matt Zabriskie"
  },
  "bugs": {
    "url": "https://github.com/reactjs/react-tabs/issues"
  },
  "dependencies": {
    "classnames": "^2.2.0",
    "prop-types": "^15.5.0"
  },
  "description": "An accessible and easy tab component for ReactJS",
  "devDependencies": {
    "babel-cli": "^7.0.0-beta.2",
    "babel-core": "^7.0.0-beta.2",
    "babel-eslint": "^8.0.1",
    "babel-jest": "^21.3.0-beta.1",
    "babel-loader": "^7.1.2",
    "babel-plugin-external-helpers": "^7.0.0-beta.2",
    "babel-plugin-transform-class-properties": "^7.0.0-beta.2",
    "babel-plugin-transform-object-rest-spread": "^7.0.0-beta.2",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.0",
    "babel-preset-env": "^2.0.0-beta.2",
    "babel-preset-react": "^7.0.0-beta.2",
    "conventional-github-releaser": "^2.0.0",
    "cross-env": "^5.0.0",
    "css-loader": "^0.28.0",
    "enzyme": "^3.1.0",
    "enzyme-adapter-react-16": "^1.0.1",
    "eslint": "^4.5.0",
    "eslint-config-airbnb": "^16.0.0",
    "eslint-config-prettier": "^2.6.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^6.0.2",
    "eslint-plugin-prettier": "^2.2.0",
    "eslint-plugin-react": "^7.0.1",
    "extract-text-webpack-plugin": "^3.0.2",
    "hoist-non-react-statics": "^2.3.1",
    "html-loader": "^0.5.1",
    "html-webpack-plugin": "^2.30.1",
    "husky": "^0.14.3",
    "jest": "^21.3.0-beta.1",
    "less": "^2.7.3",
    "less-loader": "^4.0.5",
    "lint-staged": "^4.0.4",
    "npm-run-all": "^4.1.1",
    "prettier": "^1.2.2",
    "react": "^16.0.0",
    "react-dom": "^16.0.0",
    "react-live": "^1.7.1",
    "react-modal": "^3.0.0",
    "react-test-renderer": "^16.0.0",
    "rimraf": "^2.5.2",
    "rollup": "^0.51.5",
    "rollup-plugin-babel": "^3.0.2",
    "rollup-plugin-commonjs": "^8.2.6",
    "rollup-plugin-ignore": "^1.0.3",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^2.0.1",
    "standard-version": "^4.2.0",
    "style-loader": "^0.19.0",
    "uglifyjs-webpack-plugin": "^1.0.1",
    "webpack": "^3.6.0",
    "webpack-dev-server": "^2.9.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Fu1frsfsGUUwxsNQsjQDo1ZuNwyLCXoZcu7jaaeWAP9HlwPpYsUzNQaquA6+6jd4E/uPlBGyBTFW3PpEUOwkVw==",
    "shasum": "0331d26173c56e7af4fdbfb6225e62683cfdda52",
    "tarball": "https://registry.npmjs.org/react-tabs/-/react-tabs-2.2.1.tgz"
  },
  "files": [
    "dist",
    "esm",
    "lib",
    "style"
  ],
  "gitHead": "aa8d78dbdb91fdf778d85ea775519e45360cc264",
  "homepage": "https://github.com/reactjs/react-tabs",
  "jest": {
    "roots": [
      "src"
    ],
    "testRegex": "/__tests__/.+-test\\.js$"
  },
  "keywords": [
    "react",
    "tabs",
    "a11y",
    "react-component"
  ],
  "license": "MIT",
  "lint-staged": {
    "src/**/*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "mzabriskie",
      "email": "mzabriskie@gmail.com"
    }
  ],
  "module": "esm/index.js",
  "name": "react-tabs",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.9 || ^15.3.0 || ^16.0.0"
  },
  "readme": "# react-tabs [![Build Status](https://travis-ci.org/reactjs/react-tabs.svg?branch=master)](https://travis-ci.org/reactjs/react-tabs) [![npm version](https://img.shields.io/npm/v/react-tabs.svg)](https://www.npmjs.com/package/react-tabs)\n\nAn accessible and easy tab component for ReactJS.\n\nhttps://reactcommunity.org/react-tabs/\n\n> Supports React 0.14.9+, 15.3+ and 16+\n\n## Installing\n\n```bash\nyarn add react-tabs\n```\n\nYou can also use react-tabs directly as UMD build in an HTML document by adding\n\n```html\n<script src=\"https://unpkg.com/react-tabs@2/dist/react-tabs.development.js\" />\n<!-- or -->\n<script src=\"https://unpkg.com/react-tabs@2/dist/react-tabs.production.min.js\" />\n```\n\nFor example usages of the UMD builds have a look at the [`examples/umd`](./examples/umd/) folder.\nThe development UMD build also needs the package `prop-types` being loaded besides `react`.\n\n## Basic Example\n\n```js\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\n\nexport default () => (\n  <Tabs>\n    <TabList>\n      <Tab>Title 1</Tab>\n      <Tab>Title 2</Tab>\n    </TabList>\n\n    <TabPanel>\n      <h2>Any content 1</h2>\n    </TabPanel>\n    <TabPanel>\n      <h2>Any content 2</h2>\n    </TabPanel>\n  </Tabs>\n);\n```\n\n## API\n\n### resetIdCounter(): void\n\nAllows reseting the internal id counter which is used to generate unique id's for tabs and tab panels.\n\nYou should never need to use this in the browser. Only if you are running an isomorphic react app that is rendered on the server you should call `resetIdCounter()` before every render so that the ids that get generated on the server match the ids generated in the browser.\n\n```js\nimport { resetIdCounter } from 'react-tabs';\n\nresetIdCounter();\nReactDOMServer.renderToString(...);\n```\n\n## Components\n\nreact-tabs consists of 4 components which all need to be used together.\n\n### &lt;Tabs /&gt;\n\nIf you specify additional props on the `<Tabs />` component they will be forwarded to the rendered `<div />`.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs\"`\n\nProvide a custom class name for the outer `<div />` of the tabs.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n#### defaultFocus: `boolean`\n\n> default: `false`\n\nIf set to `true` the tabs will be focused on initial render. This allows immediate use of keyboard keys to switch tabs after the first render.\n\n#### defaultIndex: `number`\n\n> default: `0`\n\nThis allows changing the tab that should be open on initial render. This is a zero-based index, so first tab is `0`, second tab is `1`, ...\n\n> This can only be used in uncontrolled mode when react-tabs handles the current selected tab internally and for this reason cannot be used together with `selectedIndex`. See [here](#controlled-vs-uncontrolled-mode) for more info on modes.\n\n#### disabledTabClassName: `string`\n\n> default: `\"react-tabs__tab--disabled\"`\n\nProvide a custom class name for disabled tabs.\n\n> This option can also be set directly at the `<Tab />` component.\n\n#### domRef: `(node: ?HTMLElement) => void`\n\n> default: `null`\n\nRegister a callback that will receive the underlying DOM node for every mount. It will also receive null on unmount.\n\n#### forceRenderTabPanel: `boolean`\n\n> default: `false`\n\nBy default only the current active tab will be rendered to DOM. If set to `true` all tabs will be rendered to the DOM always.\n\n> This can also be enabled for each individual `<TabPanel />` component with its prop `forceRender`.\n\n#### onSelect: `(index: number, lastIndex: number, event: Event) => ?boolean`\n\n> default: `undefined`\n\nThis event handler is called every time a tab is about to change. It will be called with the `index` that it will be changed to, the `lastIndex` which was selected before and the underlying `event` which is usually either a `keydown` or `click` event. When `index` and `lastIndex` are equal it means the user clicked on the currently active tab.\n\nThe callback can optionally return `true` to cancel the change to the new tab.\n\n> Returning `true` when the change to the new tab should be canceled is also important in controlled mode, as react-tabs still internally handles the focus of the tabs.\n\n> In controlled mode the `onSelect` handler is a required prop.\n\n#### selectedIndex: `number`\n\n> default: `null`\n\nSet the currently selected tab. This is a zero-based index, so first tab is `0`, second tab is `1`, ...\n\nThis enables controlled mode, which also requires `onSelect` to be set. See [here](#controlled-vs-uncontrolled-mode) for more info on modes.\n\n#### selectedTabClassName: `string`\n\n> default: `\"react-tabs__tab--selected\"`\n\nProvide a custom class name for the active tab.\n\n> This option can also be set directly at the `<Tab />` component.\n\n#### selectedTabPanelClassName: `string`\n\n> default: `\"react-tabs__tab-panel--selected\"`\n\nProvide a custom class name for the active tab panel.\n\n> This option can also be set directly at the `<TabPanel />` component.\n\n### &lt;TabList /&gt;\n\nIf you specify additional props on the `<TabList />` component they will be forwarded to the rendered `<ul />`.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs__tab-list\"`\n\nProvide a custom class name for the `<ul />`.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n### &lt;Tab /&gt;\n\nIf you specify additional props on the `<Tab />` component they will be forwarded to the rendered `<li />`.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs__tab\"`\n\nProvide a custom class name for the `<li />`.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n#### disabled: `boolean`\n\n> default: `false`\n\nDisable this tab which will make it not do anything when clicked. Also a disabled class name will be added (see `disabledClassName`)\n\n#### disabledClassName: `string`\n\n> default: `\"react-tabs__tab--disabled\"`\n\nProvide a custom class name for disabled tabs.\n\n> This option can also be set for all `<Tab />` components with the prop `disabledTabClassName` on `<Tabs />`.\n\n#### selectedClassName: `string`\n\n> default: `\"react-tabs__tab--selected\"`\n\nProvide a custom class name for the active tab.\n\n> This option can also be set for all `<Tab />` components with the prop `selectedTabClassName` on `<Tabs />`.\n\n#### tabIndex: `string`\n\n> default: if selected `\"0\"` otherwise `null`\n\nOverrides the tabIndex to enabled tabbing between tabs.\n\n### &lt;TabPanel /&gt;\n\nIf you specify additional props on the `<TabPanel />` component they will be forwarded to the rendered `<div />`.\n\n#### className: `string | Array<string> | { [string]: boolean }`\n\n> default: `\"react-tabs__tab-panel\"`\n\nProvide a custom class name for the `<div />` containing the tab content.\n\n> You can also supply an array of class names or an object where the class names are the key and the value is a boolean indicating if the name should be added. See the docs of [classnames](https://github.com/JedWatson/classnames#usage) on how to supply different class names.\n\n#### forceRender: `boolean`\n\n> default: `false`\n\nBy default the tab content will only be rendered when the tab is active. If set to `true` the tab will also be rendered if inactive.\n\n> This can also be enabled for all `<TabPanel />` components with the prop `forceRenderTabPanel` on `<Tabs />`.\n\n#### selectedClassName: `string`\n\n> default: `\"react-tabs__tab-panel--selected\"`\n\nProvide a custom class name for the active tab panel.\n\n> This option can also be set for all `<TabPanel />` components with the prop `selectedTabPanelClassName` on `<Tabs />`.\n\n## Controlled vs Uncontrolled mode\n\nReact tabs has two different modes it can operate in, which change the way how much you need to take care about the state yourself.\n\n### Uncontrolled mode\n\nThis is the default mode of react-tabs and makes the react-tabs components handle its state internally. You can change the starting tab with `defaultIndex` and you can listen for changes with `onSelect`.\n\nIn this mode you cannot force a tab change during runtime.\n\n```js\n<Tabs defaultIndex={1} onSelect={index => console.log(index)}>\n  <TabList>\n    <Tab>Title 1</Tab>\n    <Tab>Title 2</Tab>\n  </TabList>\n  <TabPanel></TabPanel>\n  <TabPanel></TabPanel>\n</Tabs>\n```\n\n### Controlled mode\n\nThis mode has to be enabled by supplying `selectedIndex` to the `<Tabs />` component.\n\nIn this mode react-tabs does not handle any tab selection state internally and leaves all the state management up to the outer application.\n\nThis mode also enforces you to set a handler for `onSelect`. `defaultIndex` does not have any effect and will therefore throw an error.\n\n```js\nclass App extends Component {\n  constructor() {\n    this.state = { tabIndex: 0 };\n  }\n  render() {\n    return (\n      <Tabs selectedIndex={this.state.tabIndex} onSelect={tabIndex => this.setState({ tabIndex })}>\n        <TabList>\n          <Tab>Title 1</Tab>\n          <Tab>Title 2</Tab>\n        </TabList>\n        <TabPanel></TabPanel>\n        <TabPanel></TabPanel>\n      </Tabs>\n    );\n  }\n}\n```\n\n## Styling\n\nreact-tabs does not include any style loading by default. Default stylesheets are provided and can be included in your application if desired.\n\n### Webpack\n\nWhen using webpack and a appropriate loader (`css-loader`, `sass-loader`, `less-loader` or `style-loader`) you can simply import the default stylesheet.\n\n```js\nimport 'react-tabs/style/react-tabs.css';\n// or\nimport 'react-tabs/style/react-tabs.scss';\n// or\nimport 'react-tabs/style/react-tabs.less';\n```\n\n### SASS\n\nWhen using SASS you can easily import the default styles\n\n```scss\n@import '../../path/to/node_modules/react-tabs/style/react-tabs.scss';\n```\n\n### LESS\n\nWhen using LESS you can easily import the default styles\n\n```scss\n@import '../../path/to/node_modules/react-tabs/style/react-tabs.less';\n```\n\n### UMD\n\nWhen using the UMD version of react-tabs you can easily use the default styles by adding\n\n```html\n<html>\n  <head>\n    ...\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/react-tabs@2/style/react-tabs.css\">\n  </head>\n  ...\n</html>\n```\n\n### Custom\n\nYou can also always just simply copy the default style to your own css/scss/less and modify it to your own needs. The changelog will always tell you when classes change and we also consider changes that break the styling as semver major.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reactjs/react-tabs.git"
  },
  "scripts": {
    "build": "npm-run-all clean:* --parallel build:*",
    "build:commonjs": "cross-env BABEL_OUTPUT=commonjs babel src/ --out-dir lib/ --ignore **/__tests__,**/__mocks__",
    "build:esm": "babel src/ --out-dir esm/ --ignore **/__tests__,**/__mocks__",
    "build:umd": "cross-env BABEL_TARGET=rollup yarn rollup -c",
    "clean:commonjs": "rimraf lib",
    "clean:umd": "rimraf dist",
    "create-github-release": "conventional-github-releaser -p angular",
    "format": "eslint src --fix",
    "lint": "eslint src",
    "prebump": "run-s lint test",
    "precommit": "lint-staged",
    "prepublish": "yarn run build",
    "release": "standard-version --sign",
    "start": "webpack-dev-server --inline --content-base examples/",
    "test": "cross-env BABEL_OUTPUT=commonjs jest",
    "website": "run-s website:clean website:build website:redirect",
    "website:build": "cross-env NODE_ENV=production webpack",
    "website:clean": "rimraf examples/dist",
    "website:redirect": "cp -R examples/src/example examples/dist"
  },
  "version": "2.2.1"
}
